#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#include <termios.h>
#include <errno.h>
#include <string.h>

#include <iostream>
#include <pthread.h>


#define STTY_DEV "/dev/ttyUSB0"
#define BUFF_SIZE 50

int stty_fd, n;
char buffer[BUFF_SIZE];
struct termios opt;


void serialSend(int degree) {

    sprintf(buffer,"D:%d,600,600\n",degree);
    printf("%s", buffer);
    // strcpy(buffer, controlCommand);
    write(stty_fd, buffer, strlen(buffer));

}


int main() {


    // 打开串口设备
    stty_fd = open(STTY_DEV, O_RDWR);
    if(-1==stty_fd) {
        perror("open device");
        return 0;
    }
    printf("Open device success, waiting user input ...\n");

    // 获取当前串口配置
    tcgetattr(stty_fd, &opt);
    tcflush(stty_fd, TCIOFLUSH);

    // 设置波特率
    cfsetispeed(&opt, B115200);
    cfsetospeed(&opt, B115200);


    // 设置数据位 - 8位数据位
    opt.c_cflag &= ~CSIZE;
    opt.c_cflag |= CS8;

    // 设置奇偶位 - 无奇偶校验
    opt.c_cflag &= ~PARENB;
    opt.c_iflag &= ~INPCK;

    // 设置停止位 - 1位停止位
    opt.c_cflag &= ~CSTOPB;

    // 设置超时时间 - 15秒
    opt.c_cc[VTIME] = 150;
    opt.c_cc[VMIN] = 0;

    // 设置写入设备
    if(0!=tcsetattr(stty_fd, TCSANOW, &opt)) {
        perror("set baudrate");
        return 0;
    }
    tcflush(stty_fd, TCIOFLUSH);


    while (true) {
        serialSend(600);
        sleep(1);
        // printf("600\n");
        serialSend(900);
        sleep(1);
        // printf("900\n");
    }
    

    // // 读取数据，直到接收到"quit"字符串退出
    // while (true) {
    //     n = read(stty_fd, buffer, BUFF_SIZE);
    //     if(n<=0) {
    //         perror("read data");
    //         break;
    //     }
    //     buffer[n] = '\0';

    //     printf("%s", buffer);
    //     if(0==strncmp(buffer, "quit", 4)) {
    //         printf("user send quit!\n");
    //         break;
    //     }
    // }

    printf("Program will exit!\n");
    
    close(stty_fd);

    return 0;
}